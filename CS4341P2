import numpy as np
import sys
import matplotlib.pyplot as plt
import keras
from keras.models import Sequential
from keras.layers.core import Dense, Dropout, Activation
from keras.wrappers.scikit_learn import KerasClassifier
from keras.models import load_model
from keras.utils import np_utils
from keras.datasets import mnist
from sklearn.metrics import confusion_matrix
import itertools
from sklearn import svm, datasets
from sklearn.model_selection import train_test_split
from keras import regularizers
from sklearn.metrics import confusion_matrix
from scipy import stats
# confusion matrix plot grabbed from Sci-Kit Learn's documentation website http://scikit-learn.org/stable/auto_examples/model_selection/plot_confusion_matrix.html
def plot_confusion_matrix(cm, classes,
                          normalize=False,
                          title='Confusion matrix',
                          cmap=plt.cm.Blues):
    """
    This function prints and plots the confusion matrix.
    Normalization can be applied by setting `normalize=True`.
    """
    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Normalized confusion matrix")
    else:
        print('Confusion matrix, without normalization')

    print(cm)

    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)

    fmt = '.2f' if normalize else 'd'
    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, format(cm[i, j], fmt),
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")

    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label')
#Loading the data from the given labels, images and reshaping the images to have the correct shape
np.set_printoptions(threshold=np.nan)
ImageDatabase = np.load("images.npy")
LabelDatabase = np.load("labels.npy")
ImageDatabase = ImageDatabase.reshape(6500, 784)
#creating the training, test, and validation sets for Images
ImageTrainingSet = ImageDatabase[:3900]
ImageValidationSet = ImageDatabase[3900:5200]
ImageTestSet = ImageDatabase[5200:6500]

ImageTrainingSet = ImageTrainingSet.astype('float32')
ImageValidationSet = ImageValidationSet.astype('float32')
ImageTestSet = ImageTestSet.astype('float32')

ImageTrainingSet = ImageTrainingSet / 255
ImageValidationSet = ImageValidationSet / 255
ImageTestSet = ImageTestSet / 255

LabelTrainingSet = LabelDatabase[:3900]
LabelValidationSet = LabelDatabase[3900:5200]
LabelTestSetNumeric = LabelDatabase[5200:6500]
LabelTrainingSet = np_utils.to_categorical(LabelTrainingSet, 10)
LabelValidationSet = np_utils.to_categorical(LabelValidationSet, 10)
LabelTestSet = np_utils.to_categorical(LabelTestSetNumeric, 10)

TestResult = np.zeros(shape=(3,10))
layers = 0
while layers < 3:
    model = Sequential()
    model.reset_states()
    if layers == 0:
        model.add(Dense(50, input_shape=(784,), activation='relu'))
        model.add(Dropout(0.2))
        # model.add(Dense(50, activation='relu'))
        # model.add(Dense(50, activation='relu'))
        # model.add(Dense(50, activation='relu'))
        # model.add(Dense(50, activation='relu'))
        # model.add(Dense(50, activation='relu'))
        # model.add(Dense(50, activation='relu'))
        # model.add(Dense(50, activation='relu'))
        # model.add(Dense(50, activation='relu'))
        model.add(Dense(10, activation='softmax'))
        Sgd = keras.optimizers.SGD(lr=0.001, decay=1e-6, momentum=0.9, nesterov=True)
        model.compile(loss='categorical_crossentropy', optimizer=Sgd, metrics=["accuracy"])
        History = model.fit(ImageTrainingSet, LabelTrainingSet,
                            batch_size=512, epochs=500, verbose=1,
                            validation_data=(ImageValidationSet, LabelValidationSet))
    elif layers == 1:
        model.add(Dense(50, input_shape=(784,), activation='relu'))
        model.add(Dropout(0.2))
        model.add(Dense(50, activation='relu'))
        # model.add(Dense(50, activation='relu'))
        # model.add(Dense(50, activation='relu'))
        # model.add(Dense(50, activation='relu'))
        # model.add(Dense(50, activation='relu'))
        # model.add(Dense(50, activation='relu'))
        # model.add(Dense(50, activation='relu'))
        # model.add(Dense(50, activation='relu'))
        model.add(Dense(10, activation='softmax'))
        Sgd = keras.optimizers.SGD(lr=0.001, decay=1e-6, momentum=0.9, nesterov=True)
        model.compile(loss='categorical_crossentropy', optimizer=Sgd, metrics=["accuracy"])
        History = model.fit(ImageTrainingSet, LabelTrainingSet,
                            batch_size=512, epochs=500, verbose=1,
                            validation_data=(ImageValidationSet, LabelValidationSet))
    elif layers == 2:
        model.add(Dense(50, input_shape=(784,), activation='relu'))
        model.add(Dropout(0.2))
        model.add(Dense(50, activation='relu'))
        model.add(Dense(50, activation='relu'))
        model.add(Dense(50, activation='relu'))
        model.add(Dense(50, activation='relu'))
        model.add(Dense(50, activation='relu'))
        model.add(Dense(50, activation='relu'))
        model.add(Dense(50, activation='relu'))
        model.add(Dense(50, activation='relu'))
        model.add(Dense(10, activation='softmax'))
        Sgd = keras.optimizers.SGD(lr=0.001, decay=1e-6, momentum=0.9, nesterov=True)
        model.compile(loss='categorical_crossentropy', optimizer=Sgd, metrics=["accuracy"])
        History = model.fit(ImageTrainingSet, LabelTrainingSet,
                            batch_size=512, epochs=500, verbose=1,
                            validation_data=(ImageValidationSet, LabelValidationSet))

    fig = plt.figure()
    plt.subplot(2, 1, 1)
    plt.plot(History.history['acc'])
    plt.plot(History.history['val_acc'])
    plt.title('model accuracy')
    plt.ylabel('accuracy')
    plt.xlabel('epoch')
    plt.legend(['train', 'test'], loc='lower right')
    plt.show()
    ypred = model.predict_classes(ImageTestSet, verbose=0)


    cm = confusion_matrix(LabelTestSetNumeric, ypred)
    print(cm)
    # Compute confusion matrix
    cnf_matrix = confusion_matrix(LabelTestSetNumeric, ypred)
    np.set_printoptions(precision=2)

    NormalizedMatrix = cnf_matrix.astype('float') / cm.sum(axis=1)[:, np.newaxis]
    counter = 0
    for i in NormalizedMatrix:
        for j in i:
            if j > 0.5:
                TestResult[layers][counter] = j
                counter += 1
    print(TestResult)

    # Plot non-normalized confusion matrix
    PlotClassLabels = ['0','1','2','3','4','5','6','7','8','9']
    plt.figure()
    plot_confusion_matrix(cnf_matrix, classes=PlotClassLabels,
                          title='Confusion matrix, without normalization')


    # Plot normalized confusion matrix
    plt.figure()
    plot_confusion_matrix(cnf_matrix, classes=PlotClassLabels, normalize=True,
                          title='Normalized confusion matrix')

    plt.show()

    layers += 1

tTest1 = stats.ttest_ind(TestResult[0], TestResult[1])
tTest2 = stats.ttest_ind(TestResult[1], TestResult[2])
tTest3 = stats.ttest_ind(TestResult[0], TestResult[2])
print("First Ttest One hidden Layer vs2 Two hidden layers: ")
print(tTest1)
print("First Ttest Two hidden Layer vs2 Ten hidden layers: ")
print(tTest2)
print("First Ttest One hidden Layer vs2 Ten hidden layers: ")
print(tTest3)

